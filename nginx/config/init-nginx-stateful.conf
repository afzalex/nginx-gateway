
server {

    listen       80 default_server;
    listen       [::]:80 default_server;

    # disbled caching so the browser won't cache the site.
    expires           0;
    add_header        Cache-Control private;

    resolver 127.0.0.11 valid=1s ipv6=off;

    error_page 403 /403.html;
    location = /403.html {
       root html;
       allow all;
       internal;
    }

    error_page 404 /404.html;
    location = /404.html {
        root html;
        allow all;
        internal;
    }

    # proxy locations
    location / {
        access_by_lua_block {
            local keycloak_base_url = "http://host.docker.internal:7251"
            local client_id = "gw-sample-application-client"
            local realm = "gw-keycloak-realm"
            local client_secret = "sFHiqoXr9rgSC9lqplVFFZYxonmk23cz"

            local logout_url = keycloak_base_url .. "/realms/" .. realm .. "/protocol/openid-connect/logout?redirect_uri=http%3A%2F%2Fhost.docker.internal%3A7252%2Fredirect"

            local opts = {
                client_id = client_id,
                client_secret = client_secret,
                discovery = keycloak_base_url .. "/realms/" .. realm .. "/.well-known/openid-configuration",

                -- IN PRODUCTION SET TO YES
                ssl_verify = "no",

                redirect_uri_path = "/redirect",
                redirect_uri_scheme = "http",
                logout_path = "/logout",
                revoke_tokens_on_logout = true,
                redirect_after_logout_uri = logout_url,
                redirect_after_logout_with_id_token_hint = true,
                session_contents = {id_token=true},
                authorization_params = {kc_idp_hint="github"},
                --http_request_decorator = function(req)
                --    local h = req.headers or {}
                --    h["EXTRA_HEADER"] = 'my extra header'
                --    req.headers = h
                --    return req
                --end
            }

            local openidc = require("resty.openidc")
            local res, err = openidc.authenticate(opts)

            -- at this point res is a Lua table with 3 keys:
            --   id_token    : a Lua table with the claims from the id_token (required)
            --   access_token: the access token (optional)
            --   user        : a Lua table with the claims returned from the user info endpoint (optional)

            if err then
                ngx.status = 403
                ngx.say(err)
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end
        }
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # http-echo-server (npm i -g http-echo-server)
        proxy_pass http://testapp;
    }
}